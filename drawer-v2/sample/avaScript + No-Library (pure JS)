// http://jsfiddle.net/95tft/

function ribbon(context) {
  this.init(context);
}
ribbon.prototype =
{
  context: null,
  mouseX: null, mouseY: null,
  painters: null,
  interval: null,
  init: function (context) {
    var scope = this;
    this.context = context;
    this.context.globalCompositeOperation = 'source-over';
    this.mouseX = SCREEN_WIDTH / 2;
    this.mouseY = SCREEN_HEIGHT / 2;
    this.painters = new Array();
    for (var i = 0; i < 50; i++) {
      this.painters.push({ dx: SCREEN_WIDTH / 2, dy: SCREEN_HEIGHT / 2, ax: 0, ay: 0, div: 0.1, ease: Math.random() * 0.1 + 0.5 });
    }
    this.interval = setInterval(update, 1000 / 60);
    function update() {
      var i;
      this.context.lineWidth = BRUSH_SIZE;
      this.context.strokeStyle = "rgba(" + COLOR[0] + ", " + COLOR[1] + ", " + COLOR[2] + ", " + 0.05 * BRUSH_PRESSURE + ")";
      for (i = 0; i < scope.painters.length; i++) {
        scope.context.beginPath();
        scope.context.moveTo(scope.painters[i].dx, scope.painters[i].dy);
        scope.painters[i].dx -= scope.painters[i].ax = (scope.painters[i].ax + (scope.painters[i].dx - scope.mouseX) * scope.painters[i].div) * scope.painters[i].ease;
        scope.painters[i].dy -= scope.painters[i].ay = (scope.painters[i].ay + (scope.painters[i].dy - scope.mouseY) * scope.painters[i].div) * scope.painters[i].ease;
        scope.context.lineTo(scope.painters[i].dx, scope.painters[i].dy);
        scope.context.stroke();
      }
    }
  },
  destroy: function () {
    clearInterval(this.interval);
  },
  strokeStart: function (mouseX, mouseY) {
    this.mouseX = mouseX;
    this.mouseY = mouseY
    for (var i = 0; i < this.painters.length; i++) {
      this.painters[i].dx = mouseX;
      this.painters[i].dy = mouseY;
    }
    this.shouldDraw = true;
  },
  stroke: function (mouseX, mouseY) {
    this.mouseX = mouseX;
    this.mouseY = mouseY;
  },
  strokeEnd: function () {

  }
}
/*
main actions below
*/
const BRUSHES = ["ribbon"],
  USER_AGENT = navigator.userAgent.toLowerCase();

var SCREEN_WIDTH = window.innerWidth,
  SCREEN_HEIGHT = window.innerHeight,
  BRUSH_SIZE = 2,
  BRUSH_PRESSURE = 1,
  COLOR = [0, 0, 0],
  BACKGROUND_COLOR = [250, 250, 250],
  brush,
  saveTimeOut,
  wacom,
  i,
  mouseX = 0,
  mouseY = 0,
  container,
  canvas,
  flattenCanvas,
  context,
  shiftKeyIsDown = false,
  altKeyIsDown = false;

init();
function init() {
  var hash, palette, embed;

  if (USER_AGENT.search("android") > -1 || USER_AGENT.search("iphone") > -1)
    BRUSH_SIZE = 2;

  if (USER_AGENT.search("safari") > -1 && USER_AGENT.search("chrome") == -1) // Safari
    STORAGE = false;

  document.body.style.backgroundRepeat = 'no-repeat';
  document.body.style.backgroundPosition = 'center center';
  container = document.createElement('div');
  document.body.appendChild(container);
  canvas = document.createElement("canvas");
  canvas.width = SCREEN_WIDTH;
  canvas.height = SCREEN_HEIGHT;
  canvas.style.cursor = 'crosshair';
  container.appendChild(canvas);
  context = canvas.getContext("2d");
  flattenCanvas = document.createElement("canvas");
  flattenCanvas.width = SCREEN_WIDTH;
  flattenCanvas.height = SCREEN_HEIGHT;
  if (window.location.hash) {
    hash = window.location.hash.substr(1, window.location.hash.length);
    for (i = 0; i < BRUSHES.length; i++) {
      if (hash == BRUSHES[i]) {
        brush = eval("new " + BRUSHES[i] + "(context)");
        menu.selector.selectedIndex = i;
        break;
      }
    }
  }
  if (!brush) {
    brush = eval("new " + BRUSHES[0] + "(context)");
  }
  window.addEventListener('mousemove', onWindowMouseMove, false);
  window.addEventListener('resize', onWindowResize, false);
  window.addEventListener('blur', onWindowBlur, false);
  document.addEventListener('mousedown', onDocumentMouseDown, false);
  document.addEventListener('mouseout', onDocumentMouseOut, false);
  canvas.addEventListener('mousedown', onCanvasMouseDown, false);
  canvas.addEventListener('touchstart', onCanvasTouchStart, false);
  onWindowResize(null);
}
// WINDOW
function onWindowMouseMove(event) {
  mouseX = event.clientX;
  mouseY = event.clientY;
}

function onWindowResize() {
  SCREEN_WIDTH = window.innerWidth;
  SCREEN_HEIGHT = window.innerHeight;

}
function onWindowBlur(event) {
  shiftKeyIsDown = false;
  altKeyIsDown = false;
}
// DOCUMENT
function onDocumentMouseDown(event) {
  event.preventDefault();
}
function onDocumentMouseOut(event) {
  onCanvasMouseUp();
}
// CANVAS
function onCanvasMouseDown(event) {
  var data, position;
  clearTimeout(saveTimeOut);
  if (altKeyIsDown) {
    flatten();
    data = flattenCanvas.getContext("2d").getImageData(0, 0, flattenCanvas.width, flattenCanvas.height).data;
    position = (event.clientX + (event.clientY * canvas.width)) * 4;
    return;
  }
  brush.strokeStart(event.clientX, event.clientY);
  window.addEventListener('mousemove', onCanvasMouseMove, false);
  window.addEventListener('mouseup', onCanvasMouseUp, false);
}
function onCanvasMouseMove(event) {
  brush.stroke(event.clientX, event.clientY);
}
function onCanvasMouseUp() {
  brush.strokeEnd();
  window.removeEventListener('mousemove', onCanvasMouseMove, false);
  window.removeEventListener('mouseup', onCanvasMouseUp, false);

}
function onCanvasTouchStart(event) {
  cleanPopUps();

  if (event.touches.length == 1) {
    event.preventDefault();

    brush.strokeStart(event.touches[0].pageX, event.touches[0].pageY);

    window.addEventListener('touchmove', onCanvasTouchMove, false);
    window.addEventListener('touchend', onCanvasTouchEnd, false);
  }
}
function onCanvasTouchMove(event) {
  if (event.touches.length == 1) {
    event.preventDefault();
    brush.stroke(event.touches[0].pageX, event.touches[0].pageY);
  }
}
function onCanvasTouchEnd(event) {
  if (event.touches.length == 0) {
    event.preventDefault();

    brush.strokeEnd();

    window.removeEventListener('touchmove', onCanvasTouchMove, false);
    window.removeEventListener('touchend', onCanvasTouchEnd, false);
  }
}
function saveToLocalStorage() {
  localStorage.canvas = canvas.toDataURL('image/png');
}
function flatten() {
  var context = flattenCanvas.getContext("2d");

  context.fillStyle = 'rgb(' + BACKGROUND_COLOR[0] + ', ' + BACKGROUND_COLOR[1] + ', ' + BACKGROUND_COLOR[2] + ')';
  context.fillRect(0, 0, canvas.width, canvas.height);
  context.drawImage(canvas, 0, 0);
}
